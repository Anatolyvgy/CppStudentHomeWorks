/*Перегрузка операторов
Написать реализацию класса Set - множество неупорядоченных целых чисел(int).
Все элементы множества хранятся в нем в одном экземпляре(учитывать это при
	добавлении нового элемента в множество).Для хранения элементов множества
	использовать массив, память под который выделяется динамически.
	1) Написать конструкторы класса
	a) По умолчанию.Создает пустое множество.
	b) Принимающий один аргумент типа int и добавляющий его в множество.
	c) Конструктор копирования
	2) Написать деструктор класса
	3) Перегрузить оператор присваивания
	4) Написать методы для работы с множеством
	a) size_t GetCount() - возвращает кол - во элементов
	b) bool Contains(int) - возвращает true в случае, если элемент содержится в
	множестве
	5) Перегрузить операторы добавления и удаления элементов из множества
	(реализовать как метод класса)
	a) void operator+=(int element)
	b) void operator-=(int element)
	6) Перегрузить операторы сравнения(реализовать как метод класса)
	a) bool operator==(Set const& rhs) const; -возвращает true, если множества
	содержат одни и те же элементы не важно в каком порядке.
	b) bool operator!= (Set const& rhs) const; -возвращает true, если множества не
	равны(можно использовать для этого оператор == )
	7) Перегрузить операторы &, | , ^ (реализовать с помощью внешней по отношению к
	классу функции)
	a) Set operator&(Set const& set1, Set const& set2) - логическое И.Функция
	возвращает множество, в которое входят элементы, содержащиеся
	одновременно в множестве set1 и set2.
	b) Set operator|(Set const& set1, Set const& set2) - логическое ИЛИ.Функция
	возвращает множество, в которое входят элементы, содержащиеся в
	множестве set1 или в множестве set2.
	c) Set operator^(Set const& set1, Set const& set2) - исключающее ИЛИ.
	Функция возвращает множество, в которое входят элементы,
	содержащиеся в множестве set1, но не содержащиеся в set2 или
	содержащиеся в set2, но не содержащиеся в set1.
	8) Перегрузить операторы чтения из потока и записи в поток(внешними
	функциями).В качестве разделителя использовать пробел.Например, в консоли
	пишется строка "100 2 4 32 15", в массив соответственно попадают 5
	элементов.Аналогично вывод на консоль через пробел.
	9) Написать оператор преобразования типа
	operator bool() const; – возвращает true, если в множестве есть хотя бы один
	элемент.*/

#include "Set.h"
#include <iostream>

int main()
{
	Set set1;
	Set set2(6);

	set1 += 3;
	set1 += 6;
	set1 += 80;
	set1 -= 80;
	
	set2 = set1;

	set1 -= 3;
	set1 += 0;
	set2 += 6;
	set1 += 6788;
	set2 += 68;

	std::cout << "set1: " << set1 << std::endl;
	std::cout << "set2: " << set2 << std::endl;

	std::cout << "set1 contains: " << set1.GetCount() << " elements" << std::endl;
	std::cout << "set2 contains: " << set2.GetCount() << " elements" << std::endl;

	if (set1 == set2)
	{
		std::cout << "true\n";
	}
	else
	{
		std::cout << "false\n";
	}

	Set set3;

	set3 = set1 & set2;

	std::cout << "set1 & set2: " << set3 << "\n";

	Set set4;

	set4 = set1 | set2;

	std::cout << "set1 | set2: " << set4 << "\n";

	Set set5;

	set5 = set1 ^ set2;

	std::cout << "set1 ^ set2: " << set5 << "\n";

	Set set6;

	std::cin >> set6;

	std::cout << set6 << "\n";

	bool b;
	b = set2;

	std::cout << b << "\n";

	Set set7(set1);

	return 0;
}