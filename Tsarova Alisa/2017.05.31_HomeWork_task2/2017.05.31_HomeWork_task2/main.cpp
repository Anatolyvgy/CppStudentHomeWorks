/*Создать класс Stack, реализующий стек целых чисел (int). Основные два метода
стека: Push() – поместить элемент в стек и Pop() – забрать элемент из стека и
возвратить в функции. Элемент, помещенный в стек последним с помощью Push(),
возвращается первым с помощью Pop(). Память под содержимое стека выделять
динамически по мере роста стека.
1) Написать конструкторы класса
a) Конструктор по умолчанию, первоначально выделяющий память под 10
элементов
b) Конструктор копирования
2) Написать деструктор класса
3) Перегрузить оператор присваивания
4) Реализовать методы класса
1) void Push(int element); – поместить элемент в стек
2) int Pop(); – извлечь элемент из стека
3) size_t GetCount(); – вернуть количество элементов в стеке
4) int Top(); – возвращает элемент из стека, не извлекая его
5) void Clear(); – очистить стек
5) Перегрузить операторы
a) Stack& operator<<(int element) – помещает элемент в стек (то же самое, что
делает Push)
b) Stack& operator>>(int& element) – извлекает элемент из стека (то же самое, что
делает Pop)*/

#include "Stack.h"

int main()
{
	Stack stack1;
	Stack stack2;

	stack1.Push(1);
	stack1.Push(2);
	stack1.Push(3);
	stack1.Push(4);
	stack1.Push(5);
	stack1.Push(6);
	stack1.Push(7);
	stack1.Push(8);
	stack1.Push(9);
	stack1.Push(10);
	stack1.Push(11);

	stack2 = stack1;

	int pop = stack2.Pop();

	int count = stack2.GetCount();

	int top = stack2.Top();

	stack2.Clear();

	stack2 << 3;

	int a = 8;
	stack2 >> a;

	return 0;
}